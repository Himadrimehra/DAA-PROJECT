#include <iostream>
#include <vector>
#include <string>
#include <algorithm>


#include <optional>
#include <winsock2.h>
#include <windows.h>


#include "httplib.h"
#include "nlohmann/json.hpp"

using namespace std;
using namespace httplib;
using json = nlohmann::json;

const int TABLE_SIZE = 10007;// Prime size for better hashing
const string BASE62 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

// Structure for hash table entry

struct Entry {
    string longUrl;
    string shortUrl;
    bool isOccupied = false;
};

vector<Entry> hashTable(TABLE_SIZE);

// Hash function for string (polynomial rolling hash)

unsigned int customHash(const string& url) {
    unsigned long long hash = 0;
    unsigned long long base = 31;
    unsigned long long mod = TABLE_SIZE;

    for (char c : url) {
        hash = (hash * base + c) % mod;
    }

    return static_cast<unsigned int>(hash);
}

// Convert index to Base62 string

string encodeBase62(unsigned int num) {
    string encoded;
    do {
        encoded += BASE62[num % 62];
        num /= 62;
    } while (num > 0);
    reverse(encoded.begin(), encoded.end());
    return encoded;
}

// Insert long URL and return short URL using open addressing

string shortenUrl(const string& longUrl) {
    unsigned int hashIndex = customHash(longUrl);

    for (int i = 0; i < TABLE_SIZE; i++) {
        int idx = (hashIndex + i) % TABLE_SIZE;

        if (hashTable[idx].isOccupied && hashTable[idx].longUrl == longUrl) {
            return hashTable[idx].shortUrl; // already exists
        }

        if (!hashTable[idx].isOccupied) {
            string shortUrl = encodeBase62(idx);
            hashTable[idx] = {longUrl, shortUrl, true};
            return shortUrl;
        }
    }

    return "ERROR_TABLE_FULL";
}

// Retrieve original URL from short URL


optional<string> getLongUrl(const string& shortUrl) {
    // Decode Base62 shortUrl to index
    unsigned int index = 0;
    for (char c : shortUrl) {
        index = index * 62 + BASE62.find(c);
    }

    if (index < TABLE_SIZE && hashTable[index].isOccupied && hashTable[index].shortUrl == shortUrl) {
        return hashTable[index].longUrl;
    }

    return nullopt;
}

int main() {
    Server server;

    server.Post("/shorten", [](const Request& req, Response& res) {
        if (!req.has_param("longUrl")) {
            res.status = 400;
            res.set_content("{\"error\": \"Missing longUrl\"}", "application/json");
            return;
        }

        string longUrl = req.get_param_value("longUrl");
        string shortUrl = shortenUrl(longUrl);

        json response;
        response["shortUrl"] = shortUrl;
        res.set_content(response.dump(), "application/json");
    });

    server.Get(R"(/(\w+))", [](const Request& req, Response& res) {
        string shortUrl = req.matches[1];
        auto result = getLongUrl(shortUrl);

        json response;
        if (result) {
            response["url"] = *result;
            response["statusCode"] = 302;
        } else {
            response["url"] = "";
            response["statusCode"] = 404;
        }

        res.set_content(response.dump(), "application/json");
    });

    cout << "Server is running at http://localhost:8080" << endl;
    server.listen("localhost", 8080);
    return 0;
}

//g++ -Icpp-httplib -Ijson/include -o shortenurl shortenurl.cpp -lws2_32

//.\shortenurl.exe   
